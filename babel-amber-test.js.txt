const variables = ["isNameDecoratorButton", "disableTransition"]; // [{name: "isMyVar", value: true/false/string}]

// for now only supports variabls with true value
// for each slot, return one useStyles
// for button it will be useStyles and useIconStyles

export default function ({ types: t }) {
  return {
    visitor: {
      ExportNamedDeclaration(path) {
        t.assertVariableDeclaration(path.node.declaration);
        t.assertVariableDeclarator(path.node.declaration.declarations[0]);
        t.assertObjectExpression(path.node.declaration.declarations[0].init);

        const exportName = path.get("declaration").get("declarations")[0].node
          .id.name;

        const slots = path
          .get("declaration")
          .get("declarations")[0]
          .get("init")
          .get("properties");

        slots.forEach((slot) => {
          const slotName = slot.node.key.name;
          const slotFunctionBody = slot.get("value").get("body");

          let spreads;

          if (t.isBlockStatement(slotFunctionBody.node)) {
            const returnStmt =
              slotFunctionBody.get("body")[
                slotFunctionBody.node.body.length - 1
              ];
            t.assertReturnStatement(returnStmt.node);
            t.assertObjectExpression(returnStmt.get("argument").node);
            spreads = returnStmt.get("argument").get("properties");
          } else if (t.isObjectExpression(slotFunctionBody.node)) {
            spreads = slotFunctionBody.get("properties");
          }
          spreads.forEach((spread) => processSpread(spread));
        });
      },
    },
  };
}

// TODO find all reference to a binding
// babel-type: utils, and it has definition!!

const processSpread = (spreadPath) => {
  const currSource = spreadPath.getSource();
  let hasUserVariables = false;
  for (const variable of variables) {
    if (currSource.indexOf(variable) >= 0) {
      hasUserVariables = true;
      break;
    }
  }
  if (!hasUserVariables) {
    spreadPath.remove();
  }
};
