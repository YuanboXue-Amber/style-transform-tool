import {
  buttonClassName,
  ComponentSlotStylesPrepared,
  TeamsThemeStylesProps,
} from "@fluentui/react-northstar";
import { terms } from "../../../../terms";
import { getOverrideFn } from "../../../theme-namespace-helper";

export const buttonStyles: ComponentSlotStylesPrepared<
  NonNullable<TeamsThemeStylesProps["Button"]>,
  // eslint-disable-next-line msteams/no-explicit-any-with-exceptions
  any
> = {
  amber: ({ variables: isAmber }) => ({
    ...(!!isAmber && terms.isChatRosterActionIcon.root),
  }),
  // eslint-disable-next-line msteams/function-complexity
  root: (componentStyleParameters) => {
    const {
      props: { disabled },
      variables: {
        actionMenuHiddenButton,
        appPickerItem,
        callingParticipantIsSpeaking,
        chatRosterTriggerText,
        disableTransition,
        emoticonButton,
        enableFluentTabs,
        giphyDisclaimerViewTerms,
        giphyPickerItem,
        hasError,
        hasSmallerSpacingAfter,
        isAcceptButton,
        isActiveCallNumberButton,
        isAdaptiveCardRefreshButton,
        isAudioCardButton,
        isAutoMuteChatAlertLink,
        isBreakoutRoomsMainAssignDropdown,
        isBreakoutRoomMoreActionButtion,
        isBreakoutRoomsAssignmentDropdownLabel,
        isBiometricEnrollmentButton,
        isButtonLookingLikeIcon,
        isCallHistorySelectedFilterButton,
        isCallHistoryTriggerButton,
        isCallingPrejoinBannerDismissButton,
        isCallingPreJoinScreenOption,
        isCallingPreJoinScreenSmallButton,
        isCallingPreJoinV2ComputerAudioVolumeSlider,
        isCallingRosterItemAction,
        isCallingRosterLobbyButton,
        isCallingRosterPopupButton,
        isCallingRosterSectionAction,
        isCallingScreenTextButton,
        isCallingSidePanelIconOnlyButton,
        isCallingSidePanelInlineButton,
        isCallingUpsellScreen,
        isCallParkButton,
        isCallQualityFeedbackCancelBotton,
        isCardButton,
        isChatHeaderCallButton,
        isShareButtonInteropChat,
        isChatJoinButton,
        isChatPaneIconButton,
        isChatRosterActionButton,
        isChatRosterActionButtonEmbed,
        isChatRosterActionButtonOutside,
        isChicletActionButton,
        isCodeSnippetCardEditButton,
        isCodeSnippetCardExpandButton,
        isCodeSnippetErrorText,
        isColorPickerButton,
        isCompactChatDensity,
        isComposeInsertTableCell,
        isConfirmationNotificationButton,
        isCopyMeetingInfoButton,
        isCustomStickerUploadIcon,
        isCustomTabContainerUnderlined,
        isDenyButton,
        isDialpadButton,
        isDialpadSplitCallButton,
        isDockedUbarCustomActionButton,
        isErrorAlert,
        isFailedMessageActionsButton,
        isFilledOnHover,
        isFloatingShareAppPreviewButton,
        isFloatingShareTrayWindowMoreButton,
        isFloatingShareWindowsPreviewButton,
        isFloatingSharePPTPreview,
        isFloatingSharePreviewButton,
        isShareInviteButton,
        isFreemiumShareIcon,
        isGroupNameExpander,
        isHeaderV1,
        isHeaderV2,
        isHiddenAppAttribution,
        isInfoAlert,
        isLearnMoreButton,
        isLive,
        isLiveHeaderButton,
        isLobbyPopupCloseButton,
        isMeetingChatNotificationSettingsDialog,
        isMeetingOptionsButtonAndroid,
        isMeetingOptionsButtonIos,
        isMeetingOptionsButtonOutlookWindows,
        isMeetingOptionsSuccessButton,
        isMeetingOptionsButtonDisabled,
        isMeetingRoomConsoleUbar,
        isMeetingRoomCallingRoster,
        isMessageReactionCountButton,
        isMyselfVideoExpanded,
        isNameDecoratorButton,
        isNameGroupChatButton,
        isNameGroupChatButtonEmbed,
        isOverflowButton,
        isParticipantNameLayerIcon,
        isPlayrateMenu,
        isPreview,
        isPromoAlert,
        isRailHeaderCloseButton,
        isRecordingInfoBtn,
        isRecordingMoreOptions,
        hasRestrictedImage,
        isRejectCallButton,
        isRemoveButton,
        isRosterHeaderMoreMenuButton,
        isScreenRecordingDisabledDialogButton,
        isScreenShareFromChatCloseButton,
        isSelectedComposeInsertTableCell,
        isSfCAcceptBlockPane,
        isSfCAcceptBlockPanePreview,
        isSharePreviewButton,
        isSharePreviewSelected,
        isShareTrayBrowseButton,
        isSmartRepliesButton,
        isSpeedDialContactGroupTriggerButton,
        isSpeedDialTriggerButton,
        isSquareShape,
        isStacked,
        /* BEGIN: Standardized mobile first breakpoints variables */
        isMinWidthBreakpointAtLeast360,
        isMinWidthBreakpointAtLeast720,
        isMoreMenuOpen,
        /* END: Standardized mobile first breakpoints variables */
        isStackedAlertsButton,
        isStickerPickerItemImageButton,
        isSwitchCameraButton,
        isTextOnlyConfirmationNotificationButton,
        isTitleBarButton,
        isTitleBarCloseButton,
        isTranscriptGoToCurrentButton,
        isT2MainWindow,
        isCallTransferButton,
        isUbarCustomButtonControl,
        isUbarCustomIconControl,
        isUbarCustomMenuItem,
        isUrlPreviewCancelButton,
        isVoicemailControl,
        isWarningAlert,
        loadingGiphyUrl,
        messageExtensionGridItem,
        messageExtensionListItem,
        messageNotificationButton,
        newMessageButton,
        noBorderShadow,
        overrideFocusStylesForPrimary,
        primaryWithText,
        setBackgroundColor,
        starRatingFill,
        stickerEditorButton,
        textColorFocus,
        transparent,
        useCardButtonCustomMargin,
        useCardButtonNonColorStyles,
        useCardButtonSelectedColor,
        useCardButtonTintColor,
        ...ns
      },
      theme: { siteVariables },
    } = componentStyleParameters;

    const { colorScheme } = siteVariables;

    const { brand: colorSchemeBrand, default: colorSchemeDefault } =
      colorScheme;

    const _getOverride = getOverrideFn("Button", "root");

    return {
      ...(isNameDecoratorButton &&
        !disableTransition && {
          minWidth: "auto",
          marginLeft: ".4rem",
          height: "auto",
          ...(callingParticipantIsSpeaking && {
            color: colorSchemeDefault.foreground4,
            "& svg": { fill: colorSchemeDefault.foreground4 },
          }),
        }),
      ...(disableTransition && {
        transition: "unset",
        // ui-button needed to override stardust
        [`&.${buttonClassName}:focus`]: {
          backgroundColor: "transparent",
        },
      }),
      ...((isUbarCustomIconControl || isUbarCustomMenuItem) &&
        disabled && {
          color: colorSchemeBrand.foregroundDisabled,
          ":hover": {
            backgroundColor: colorSchemeDefault.background4,
            color: colorSchemeBrand.foregroundDisabled,
          },
        }),

      ...(useCardButtonSelectedColor && {
        ...(useCardButtonSelectedColor === "tint" && {
          backgroundColor: colorSchemeBrand.borderActive1,
          color: colorSchemeBrand.foregroundPressed,
          borderColor: colorSchemeBrand.borderPressed,
          "&:hover": {
            backgroundColor: colorSchemeBrand.borderActive1,
            color: colorSchemeBrand.foregroundPressed,
            borderColor: colorSchemeBrand.borderPressed,
          },
          "&:focus:active": {
            backgroundColor: colorSchemeBrand.borderActive1,
            color: colorSchemeBrand.foregroundPressed,
            borderColor: colorSchemeBrand.borderPressed,
          },
          ":focus-visible": {
            backgroundColor: `${colorSchemeBrand.borderActive1} !important`,
            color: colorSchemeBrand.foregroundPressed,
          },
        }),
        ...(useCardButtonSelectedColor === "primary" && {
          backgroundColor: colorSchemeBrand.backgroundHover,
        }),
      }),
      /**
       * This is the entry point for namespaces
       */
      ...(ns && _getOverride(ns, componentStyleParameters)),
    };
  },
  icon: (componentStyleParameters) => {
    const {
      variables: { isChatRosterActionButton, ...ns },
    } = componentStyleParameters;

    const _getOverride = getOverrideFn("Button", "icon");

    return {
      ...(!!isChatRosterActionButton && terms.isChatRosterActionIcon.root),
      /**
       * This is the entry point for namespaces
       */
      ...(ns && _getOverride(ns, componentStyleParameters)),
    };
  },
};

// // <Button variables={{chatRosterTriggerText: true}}/>

// // /// ------------------

// // const styles = makeStyles({
// //   root: {
// //     ...{
// //       marginRight: "0.2rem",
// //     }
// //   }
// // })
// // <Button className={styles.root} />
